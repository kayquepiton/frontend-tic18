A tarefa FEB-P007 consiste em desenvolver uma aplicação Angular para a leitura e
análise de um arquivo JSON denominada JReader. Considere a Figura 01 que ilustra
uma captura de tela do modelo da aplicação a ser desenvolvida(Todas as catgerias e veiculos
devem aparecer como botão). 

A aplicação deve ler
um arquivo JSON (Tabela 1), analisar e exibir todas as categorias de veículos, todos os
veículos da categoria selecionada, todas as propriedades do veículo selecionado e por
fim o valor da propriedade selecionada. A leitura do arquivo json deve ser por meio do navegador,
onde eu clico no botão procurar e procuro o arquivo no computador.

Considere como exemplo de uso da aplicação um usuário que acabou de carregar o
arquivo “veiculos.json”. 

Se o usuário clica em Aviões, a aplicação mostra os aviões:
Spiƞire, P-51 e o B-17 ao lado direito de categorias. 

Se o usuário clica em spiƞire, a
aplicação exibe todas as características do spiƞire (Name, Model, Engine, etc) ao lado
direito de aviões. Por fim, se o usuário clica em uma das propriedades do Spiƞire, a
aplicação exibe o valor da propriedade no seu lado direiro. 

O usuário pode adicionar
esse veículo numa área de rodapé que paralelamente vai criar/adicionar um arquivo
JSON com todos os veículos selecionados e suas propriedades preenchidas para ser
posteriormente armazendo num banco de dados através de uma API.

O arquivo JSON exibido na Tabela 1 reflete o modelo de arquivo a ser lido pela
aplicação JReader e sera será adicionado no moodle como “veiculos.json”.

Tabela 1 - Arquivo JSON utilizado como entrada para a aplicação JReader:
{
"Avioes": [
{
 "Name": "Supermarine Spiƞire",
 "Model": "Mk V",
 "Engine": "Rolls-Royce Merlin",
 "NumberOfPassengers": 1,
 "Autonomia": "470 miles",
 "Alcance": "1,135 miles",
 "Teto": "36,500 Ō"
 },
{
 "Name": "P-51 Mustang",
 "Model": "D",
 "Engine": "Packard V-1650-7",
 "NumberOfPassengers": 1,
 "Autonomia": "1,650 miles",
 "Alcance": "2,300 miles",
 "Teto": "41,900 Ō"
 },
{
 "Name": "B-17 Flying Fortress",
 "Model": "G",
 "Engine": "Wright R-1820-97",
 "NumberOfPassengers": 10,
 "Autonomia": "2,000 miles",
 "Alcance": "3,750 miles",
 "Teto": "35,600 Ō"
 }
],
"Carros": [
{
 "Name": "Tesla Model S",
 "Model": "2022",
 "Engine": "Electric",
 "NumberOfPassengers": "5",
 "Autonomia": "390 miles",
 "Alcance": "N/A"
 },
{
"Name": "Ford Mustang",
 "Model": "2021",
 "Engine": "5.0L Ti-VCT V8",
 "NumberOfPassengers": "4",
 "Autonomia": "N/A",
 "Alcance": "N/A"
},
{
 "Name": "Chevrolet Camaro",
 "Model": "2022",
 "Engine": "6.2L Supercharged V8",
 "NumberOfPassengers": "4",
 "Autonomia": "N/A",
 "Alcance": "N/A"
 }
],
"Barcos": [
 {
 "Name": "Ferreƫ Yachts",
 "Model": "670",
 "Engine": "2 x MAN V8-1000",
 "NumberOfPassengers": "12",
 "Autonomia": "N/A",
 "Alcance": "N/A"
 },
 {
 "Name": "Azimut Grande",
 "Model": "25 Metri",
 "Engine": "2 x MAN V12-1800",
 "NumberOfPassengers": "10",
 "Autonomia": "N/A",
 "Alcance": "N/A"
 },
{
"Name": "Sunseeker Predator",
 "Model": "57",
 "Engine": "Twin Volvo Penta D13-
900",
 "NumberOfPassengers": "6",
 "Autonomia": "N/A",
 "Alcance": "N/A"
}
]
}


A aplicação a ser desenvolvida, deve se separada em componentes que devem ser
chamados a partir do componente app.component por seus seletores e organizados
utilizando o grid e o flexbox layout. Considere os seguintes componentes:
 carrinho - veículos selecionados;
 classes – categorias dos veículos;
 objetos – todos os veículos;
 propriedades – representa as propriedades de um objeto;
 valor-propriedade – representa o valor de uma propriedade;

Quero todos os itens dessa estrutura com toda a lógica implementada:

src/
├── app/
│   ├── app.component.css
│   ├── app.component.html
│   ├── app.component.spec.ts
│   ├── app.component.ts
│   ├── carrinho/
│   │   ├── carrinho.component.css
│   │   ├── carrinho.component.html
│   │   ├── carrinho.component.spec.ts
│   │   └── carrinho.component.ts
│   ├── classes/
│   │   ├── classes.component.css
│   │   ├── classes.component.html
│   │   ├── classes.component.spec.ts
│   │   └── classes.component.ts
│   ├── objetos/
│   │   ├── objetos.component.css
│   │   ├── objetos.component.html
│   │   ├── objetos.component.spec.ts
│   │   └── objetos.component.ts
│   ├── propriedades/
│   │   ├── propriedades.component.css
│   │   ├── propriedades.component.html
│   │   ├── propriedades.component.spec.ts
│   │   └── propriedades.component.ts
│   ├── valor-propriedade/
│   │   ├── valor-propriedade.component.css
│   │   ├── valor-propriedade.component.html
│   │   ├── valor-propriedade.component.spec.ts
│   │   └── valor-propriedade.component.ts
│   └── ..